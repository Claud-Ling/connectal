# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# File: Makefile.build
#

V?=0
ifeq ($(V),0)
  Q=@
  BSC_QUIET=-no-show-compiles
  CONNECTAL_NDK_PARAM="NDK_HOST_ECHO=true"
  FPGAMAKE_VERBOSE=
else
  Q=
  BSC_QUIET=
  CONNECTAL_NDK_PARAM=
  FPGAMAKE_VERBOSE=-v
endif
NDK_OBJCOPY=$(shell $(NDKPATH)ndk-which objcopy)

ifeq ($(CONNECTAL_DEBUG),1)
GDB=gdb
GDB2=gdb
else
GDB= LD_PRELOAD=libSegFault.so SEGFAULT_USE_ALTSTACK=1 SEGFAULT_OUTPUT_NAME=bin/bsimexe-segv-output.txt
GDB2= LD_PRELOAD=libSegFault.so SEGFAULT_USE_ALTSTACK=1 SEGFAULT_OUTPUT_NAME=bin/bsimexe2-segv-output.txt
endif

GDB_BSIM= LD_PRELOAD=libSegFault.so SEGFAULT_USE_ALTSTACK=1 SEGFAULT_OUTPUT_NAME=bin/bsim-segv-output.txt


BSCVERSION=$(shell bsc -v |grep Compiler | sed -e "s/.*version //" -e "s/ .*//")
BSCMAJOR=$(shell bsc -v |grep Compiler | sed -e "s/.*version //" -e "s/\..*//")
ifneq ($(BSCMAJOR), 2013)
    # S0015: The use of a mkSyncReset may not always result in a reset
    #        signal being seen on the destination side. Recommend
    #        replacement with mkAsyncReset.
    BSCWARNFLAGS += -demote-errors G0066:G0045 -suppress-warnings G0046:G0020:S0015:S0080:S0039
else
    #BSCFLAGS_COMMON += -D ExportUnusedClocksAndResets
endif
ifeq ($(BSCVERSION), 2014.07.A)
    BSCFLAGS_COMMON += -D ClockDefaultParam
endif

BSCOPTFLAGS= -show-schedule -aggressive-conditions
BSCPATHFLAGS=  -bdir $(DTOP)/obj -vdir $(DTOP)/verilog -simdir $(DTOP)/obj -info-dir $(DTOP)/obj
BSCFLAGS_COMMON += $(BSCWARNFLAGS) $(BSCOPTFLAGS) $(BSCPATHFLAGS) --wait-for-license
BSC_CXXFLAGS= -I $(CONNECTALDIR)/cpp -I $(CONNECTALDIR) -D BSIM
BSIM_CXX_COMMON = $(CONNECTALDIR)/cpp/BsimCtrl.cxx $(CONNECTALDIR)/cpp/TlpReplay.cxx $(CONNECTALDIR)/cpp/BsimDma.cxx $(CONNECTALDIR)/cpp/sock_utils.c
BSIM_CXX_LOCAL = $(DTOP)/jni/BsimCtrl.cxx $(DTOP)/jni/TlpReplay.cxx $(DTOP)/jni/BsimDma.cxx $(DTOP)/jni/sock_utils.c $(DTOP)/jni/portalPrintf.c

VIVADODIR=$(shell dirname $(shell dirname $(shell which vivado)))
VIVADOFLAGS= -notrace
XVLOGFLAGS =

ifeq ($(USE_BUILDCACHE),1)
BUILDCACHE=$(shell cd $(CONNECTALDIR)/..; /bin/pwd)/buildcache/buildcache
ifeq ("$(BUILDCACHE_CACHEDIR)", "")
BUILDCACHE_CACHEDIR=$(shell cd $(CONNECTALDIR)/..; /bin/pwd)/fpgamake-cache
endif
endif

RUN_BSC = BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) bsc $(BSC_QUIET) $(BSVDEFINES) $(BSCFLAGS_COMMON) $(BSCFLAGS_PROJECT) -p +:$(BSVPATH)
VFILE=verilog/$(MKTOP).v

all: exe bits

ifeq ($(CONNECTAL_SHARED),1)
  ifeq ($(RUNSOURCE2),)
    exe: connectal.so
  else
    exe: connectal.so bsim_exe2
  endif
else
  ifeq ($(BOARD),bluesim)
    ifeq ($(RUNSOURCE2),)
      exe: bsim_exe
    else
      exe: bsim_exe bsim_exe2
    endif
  else
    ifneq ($(OS),android)
      ifeq ($(RUNSOURCE2),)
        exe: ubuntu.exe
      else
        exe: ubuntu.exe ubuntu.exe2
      endif
    else
      ifeq ($(CONNECTAL_DEBUG),1)
        exe: android.debug.exe
      else
        exe: android.exe
      endif
    endif
  endif
endif

bsim_exe: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk bsim_exe
	@cp -v jni/bsim_exe bin

bsim_exe2: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk bsim_exe2
	@cp -v jni/bsim_exe2 bin

ubuntu.exe: prepare_bin_target
	@echo "ubuntu.exe"
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk ubuntu.exe
	@cp -v jni/ubuntu.exe bin
	@echo "ubuntu.exe done"

ubuntu.exe2: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk ubuntu.exe2
	@cp -v jni/ubuntu.exe2 bin

connectal.so: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk connectal.so
	@cp -v jni/connectal.so bin

ifneq ($(BOARD),bluesim)
ifneq ($(OS),android)
program:
	fpgajtag bin/mkTop.bin.gz
	sleep 1

programflash:
	vivado -mode batch -source $(dir $(FPGAMAKE))/tcl/program_bpi_flash.tcl
endif
endif

ifeq ($(CONNECTAL_NOHARDWARE),1)
bits:
else
ifeq ($(BOARD),bluesim)
bits: bsim
else
ifeq ($(BOARD),xsim)
bits: xsim
else
bits: hw/mkTop.bit prepare_bin_target
ifeq ($(OS),android)
	@echo "zipping android"
	$(CONNECTALDIR)/scripts/reorderbytes.py hw/mkTop.bin bin/mkTop.xdevcfg.bin
	gzip -f bin/mkTop.xdevcfg.bin
	$(Q)[ ! -f bin/android.exe ] || $(NDK_OBJCOPY) --remove-section fpgadata bin/android.exe
	$(Q)[ ! -f bin/android.exe ] || $(NDK_OBJCOPY) --add-section fpgadata=bin/mkTop.xdevcfg.bin.gz bin/android.exe
else ifneq ($(XILINX),)
	@echo "zipping xilinx"
	gzip -c hw/mkTop.bin > bin/mkTop.bin.gz
	$(Q)[ ! -f bin/ubuntu.exe ] || objcopy --remove-section fpgadata bin/ubuntu.exe
	$(Q)[ ! -f bin/ubuntu.exe ] || objcopy --add-section fpgadata=bin/mkTop.bin.gz bin/ubuntu.exe
	if [ -f Impl/TopDown/top-post-route.dcp ]; then cp -f Impl/TopDown/top-post-route.dcp bin; fi
	$(CONNECTALDIR)/scripts/check-timing.py bin/top-post-route-timing-summary.rpt
else
	@echo "not zipping xilinx"
endif
ifneq ($(ALTERA),)
	gzip -c $(MKTOP).sof > bin/$(MKTOP).sof.gz
endif

endif
endif
endif

android.exe: prepare_bin_target
	ndk-build $(CONNECTAL_NDK_PARAM)
	@cp -v libs/armeabi/android.exe bin
	$(Q)[ ! -f bin/mkTop.xdevcfg.bin.gz ] || $(NDK_OBJCOPY) --remove-section fpgadata bin/android.exe
	$(Q)[ ! -f bin/mkTop.xdevcfg.bin.gz ] || $(NDK_OBJCOPY) --add-section fpgadata=bin/mkTop.xdevcfg.bin.gz bin/android.exe

android.debug.exe: prepare_bin_target
	ndk-build $(CONNECTAL_NDK_PARAM) -B V=1 NDK_DEBUG=1
	@cp -v libs/armeabi/android.exe bin
	$(Q)[ ! -f bin/mkTop.xdevcfg.bin.gz ] || $(NDK_OBJCOPY) --remove-section fpgadata bin/android.exe
	$(Q)[ ! -f bin/mkTop.xdevcfg.bin.gz ] || $(NDK_OBJCOPY) --add-section fpgadata=bin/mkTop.xdevcfg.bin.gz bin/android.exe

run:
ifeq ($(CONNECTAL_SHARED),1)
	$(GDB_BSIM) ./bin/bsim -w & bsimpid=$$!; echo bsimpid $$bsimpid; $(GDB) ./bin/bsim_exe2 $(RUN_ARGS); retcode=$$?; kill $$bsimpid; exit $$retcode
else
ifeq ($(BOARD),bluesim)
    ifeq ($(RUNSOURCE2),)
	$(GDB_BSIM) ./bin/bsim -w & bsimpid=$$!; echo bsimpid $$bsimpid; $(GDB) ./bin/bsim_exe $(RUN_ARGS); retcode=$$?; kill $$bsimpid; exit $$retcode
    else
	./bin/bsim -w & bsimpid=$$!; echo bsimpid $$bsimpid; $(GDB2) ./bin/bsim_exe2& bsim2pid=$$!; $(GDB) ./bin/bsim_exe $(RUN_ARGS); retcode=$$?; kill $$bsimpid $$bsim2pid; exit $$retcode
    endif
else
  ifeq ($(BOARD),xsim)
    ifeq ($(RUNSOURCE2),)
	LD_LIBRARY_PATH=$(VIVADODIR)/lib/lnx64.o $(GDB_BSIM) ./bin/xsim -w & xsimpid=$$!; echo xsimpid $$xsimpid; $(GDB) ./bin/ubuntu.exe $(RUN_ARGS); retcode=$$?; kill $$xsimpid; exit $$retcode
    else
	LD_LIBRARY_PATH=$(VIVADODIR)/lib/lnx64.o ./bin/xsim -w & xsimpid=$$!; echo xsimpid $$xsimpid; $(GDB2) ./bin/ubuntu.exe2& xsim2pid=$$!; $(GDB) ./bin/ubuntu.exe $(RUN_ARGS); retcode=$$?; kill $$xsimpid $$xsim2pid; exit $$retcode
    endif
  else
    ifeq ($(OS),android)
	$(CONNECTALDIR)/scripts/run.zedboard bin/mkTop.xdevcfg.bin.gz bin/android.exe $(RUN_ARGS)
    else
	echo foo
ifeq ($(XILINX),"1")
	$(CONNECTALDIR)/scripts/run.pcietest bin/ubuntu.exe $(RUN_ARGS)
endif
ifeq ($(ALTERA),"1")
	$(CONNECTALDIR)/scripts/run.pcietest.altera bin/mk*.sof bin/ubuntu.exe $(RUN_ARGS)
endif
    endif # android
  endif
endif
endif

ifeq ($(BOARD), xsim)
XSI_INCLUDE_DIR=$(VIVADODIR)/data/xsim/include
XSI_EXAMPLE_DIR=$(VIVADODIR)/examples/xsim/verilog/xsi/counter/
XSIM_INCLUDES = -I$(XSI_INCLUDE_DIR) -I$(XSI_EXAMPLE_DIR) -Ijni -I$(CONNECTALDIR)/cpp -I$(CONNECTALDIR)
endif

bin/xsim: $(CONNECTALDIR)/cpp/xsimtop.cpp $(XSI_EXAMPLE_DIR)/xsi_loader.cpp
	  g++ $(XSIM_INCLUDES) -O -g -c -o xsi_loader.o $(XSI_EXAMPLE_DIR)/xsi_loader.cpp
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o portal.o $(CONNECTALDIR)/cpp/portal.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o poller.o $(CONNECTALDIR)/cpp/poller.cpp
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o sock_utils.o $(CONNECTALDIR)/cpp/sock_utils.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o timer.o $(CONNECTALDIR)/cpp/timer.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o portalSocket.o $(CONNECTALDIR)/cpp/portalSocket.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o portalJson.o $(CONNECTALDIR)/cpp/portalJson.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o portalPrintf.o $(CONNECTALDIR)/cpp/portalPrintf.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o xsimtop.o $(CONNECTALDIR)/cpp/xsimtop.cpp
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o XsimMemSlaveIndication.o jni/XsimMemSlaveIndication.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o XsimMemSlaveRequest.o jni/XsimMemSlaveRequest.c
	  g++ $(XSIM_INCLUDES) -I$(XSI_EXAMPLE_DIR) -O -g -c -o GeneratedCppCallbacks.o jni/GeneratedCppCallbacks.cpp
	  g++ -o bin/xsim xsimtop.o xsi_loader.o portal.o portalSocket.o portalJson.o poller.o sock_utils.o timer.o XsimMemSlaveRequest.o XsimMemSlaveIndication.o GeneratedCppCallbacks.o portalPrintf.o -ldl -lrt -pthread

xsim: verilog bin/xsim
	xvlog $(XVLOGFLAGS) verilog/*.v
	xelab $(XELABFLAGS) work.$(MKTOP) -dll -s $(MKTOP)

bin/vsim:
	python $(CONNECTALDIR)/scripts/sim-gen.py -o vsim/Makefile -s ~/dev/connectal/out/vsim/synthesis/ -d ~/dev/sonic-lite/vsim/modelsim -p ~/dev/sonic-lite -c $(CONNECTALDIR) -g ~/dev/connectal/out/vsim/synthesis/ -t ~/dev/connectal/out/vsim/synthesis/ -T mkSonicSimTop

vsim: verilog bin/vsim
	make -C vsim all
	make -C vsim simulate

$(VFILE): $(TOPBSVFILE) $(BSVFILES)
	$(Q)mkdir -p verilog/portal $(DTOP)/obj
	@echo BSCVERILOG [$(DTOP)]
	$(Q)cd generatedbsv; $(RUN_BSC) -remove-dollar -verilog -u -g $(MKTOP) $(TOPBSVFILE)
	$(Q)sed -i 's|// On .*|// timestamp removed|' verilog/*.v
	$(Q)for v in verilog/*.v; do $(CONNECTALDIR)/scripts/copy_verilog.py $$v $(subst :, ,$(BSVPATH)); done

$(DTOP)/jni/%.cpp: $(CONNECTALDIR)/cpp/%.cpp
	$(Q)cp $< $@
$(DTOP)/jni/%.cxx: $(CONNECTALDIR)/cpp/%.cxx
	$(Q)cp $< $@
$(DTOP)/jni/%.c: $(CONNECTALDIR)/cpp/%.c
	$(Q)cp $< $@

bsim: prepare_bin_target $(DTOP)/jni/TlpReplay.cxx $(BSIM_CXX_LOCAL)
	$(Q)mkdir -p $(DTOP)/obj verilog
	@echo BSCBSIM [$(DTOP)]
	$(Q)cd generatedbsv; $(RUN_BSC) -D BSIM -sim -u -g $(MKTOP) $(TOPBSVFILE)
	$(Q)cd generatedbsv; $(RUN_BSC) $(BSC_CXXFLAGS) -sim -e $(MKTOP) -o bsim $(DTOP)/obj/*.ba $(BSIM_CXX_LOCAL) $(BSIM_CXX_PROJECT)
	$(Q)cp -v generatedbsv/bsim* bin
	$(QTUSED)

syntax.timestamp: $(BSVFILES)
	@#$syntax.py uses environment variables: V INTERFACES BSVDEFINES_LIST DTOP DUT_NAME
	$(Q)$(CONNECTALDIR)/scripts/syntax.py $(BSVFILES)
	$(Q)touch syntax.timestamp

verilog: $(VFILE)
	@echo "verilog"

lint: $(VFILE)
	verilator --error-limit 200 --lint-only -Igeneratedbsv -Igeneratedbsv/source $(VFILE)

prepare_bin_target: syntax.timestamp
	@echo "prepare_bin_target"
	@mkdir -p bin
	@(git rev-parse HEAD 2> /dev/null || echo not a git repo) > bin/githash
	@(git diff 2>/dev/null || echo not a git repo) | gzip -c > bin/gitdiff.patch.gz

hwclean:
	rm -fr obj hw vivado*.jou vivado*.log fsm_encoding.os .Xil

clean: hwclean
	rm -fr verilog

