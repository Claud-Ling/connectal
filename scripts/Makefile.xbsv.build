# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# File: Makefile.build
#

V=0
ifeq ($(V),0)
  Q=@
  BSC_QUIET=-no-show-compiles
  XBSV_NDK_PARAM="NDK_HOST_ECHO=true"
  FPGAMAKE_VERBOSE=
else
  Q=
  BSC_QUIET=
  XBSV_NDK_PARAM=
  FPGAMAKE_VERBOSE=-v
endif

ifeq ($(XBSV_DEBUG),1)
GDB=gdb
else
GDB=
endif

BSCVERSION=$(shell bsc -v |grep Compiler | sed -e "s/.*version //" -e "s/ .*//")
BSCMAJOR=$(shell bsc -v |grep Compiler | sed -e "s/.*version //" -e "s/\..*//")
ifneq ($(BSCMAJOR), 2013)
    # S0015: The use of a mkSyncReset may not always result in a reset
    #        signal being seen on the destination side. Recommend
    #        replacement with mkAsyncReset.
    BSCWARNFLAGS += -demote-errors G0066:G0045 -suppress-warnings G0046:G0020:S0015:S0080:S0039
else
    #BSCFLAGS_COMMON += -D ExportUnusedClocksAndResets
endif
ifeq ($(BSCVERSION), 2014.07.A)
    BSCFLAGS_COMMON += -D ClockDefaultParam
endif

BSCOPTFLAGS= -show-schedule -aggressive-conditions
BSCPATHFLAGS=  -bdir $(DTOP)/obj -vdir $(DTOP)/verilog -simdir $(DTOP)/obj -info-dir $(DTOP)/obj
BSCFLAGS_COMMON += $(BSCWARNFLAGS) $(BSCOPTFLAGS) $(BSCPATHFLAGS) --wait-for-license
BSC_CXXFLAGS= -I $(XBSVDIR)/cpp -I $(XBSVDIR) -D BSIM
BSIM_CXX_COMMON = $(XBSVDIR)/cpp/BsimCtrl.cxx $(XBSVDIR)/cpp/TlpReplay.cxx $(XBSVDIR)/cpp/BsimDma.cxx $(XBSVDIR)/cpp/sock_utils.c
BSIM_CXX_LOCAL = $(DTOP)/jni/BsimCtrl.cxx $(DTOP)/jni/TlpReplay.cxx $(DTOP)/jni/BsimDma.cxx $(DTOP)/jni/sock_utils.c

VIVADOFLAGS= -notrace
XVLOGFLAGS =

ifeq ($(USE_BUILDCACHE),1)
BUILDCACHE=$(shell cd $(XBSVDIR)/..; /bin/pwd)/buildcache/buildcache
BUILDCACHE_CACHEDIR=$(shell cd $(XBSVDIR)/..; /bin/pwd)/fpgamake-cache
endif

RUN_BSC = BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) bsc $(BSC_QUIET) $(BSVDEFINES) $(BSCFLAGS_COMMON) $(BSCFLAGS_PROJECT) -p +:$(BSVPATH):$(DUT)/
vfile=verilog/$(MKTOP).v

all: exe bits

ifeq ($(BOARD),bluesim)
ifeq ($(RUNSOURCE2),)
  exe: bsim bsim_exe
else
  exe: bsim bsim_exe bsim_exe2
endif
else
  ifneq ($(OS),android)
    ifeq ($(RUNSOURCE2),)
      exe: ubuntu_exe
    else
      exe: ubuntu_exe ubuntu_exe2
    endif
  else
    ifeq ($(XBSV_DEBUG),1)
      exe: android_exe_debug
    else
      exe: android_exe
    endif
  endif
endif

bsim_exe: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk bsim_exe
	@cp -v jni/bsim_exe bin

bsim_exe2: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk bsim_exe2
	@cp -v jni/bsim_exe2 bin

ubuntu_exe: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk ubuntu_exe
	@cp -v jni/ubuntu_exe bin

ubuntu_exe2: prepare_bin_target
	$(Q)cd jni; make --no-print-directory -f Ubuntu.mk ubuntu_exe2
	@cp -v jni/ubuntu_exe2 bin

ifneq ($(BOARD),bluesim)
ifneq ($(OS),android)
program:
	fpgajtag bin/mkTop.bin.gz
	sleep 1
endif
endif

ifeq ($(BOARD),bluesim)
bits: prepare_bin_target
else
bits: hw/mkTop.bit prepare_bin_target
ifeq ($(OS),android)
	xxd hw/mkTop.bin | sed -e "s/  .*//" -e "s/ \(..\)\(..\) \(..\)\(..\)/ \\4\\3 \\2\\1/g" | xxd -r > bin/mkTop.xdevcfg.bin
	gzip -f bin/mkTop.xdevcfg.bin
else
	gzip -c hw/mkTop.bin > bin/mkTop.bin.gz
endif
	$(XBSVDIR)/scripts/check-timing.py bin/top-post-route-timing-summary.rpt
endif

android_exe: prepare_bin_target
	ndk-build $(XBSV_NDK_PARAM)
	@cp -v libs/armeabi/android_exe bin

android_exe_debug: prepare_bin_target
	ndk-build $(XBSV_NDK_PARAM) -B V=1 NDK_DEBUG=1
	@cp -v libs/armeabi/android_exe bin

run:
ifeq ($(BOARD),bluesim)
    ifeq ($(RUNSOURCE2),)
	./bin/bsim -w & bsimpid=$$!; echo bsimpid $$bsimpid; $(GDB) ./bin/bsim_exe $(RUN_ARGS); retcode=$$?; kill $$bsimpid; exit $$retcode
    else
	./bin/bsim -w & bsimpid=$$!; echo bsimpid $$bsimpid; ./bin/bsim_exe2& bsim2pid=$$!; $(GDB) ./bin/bsim_exe $(RUN_ARGS); retcode=$$?; kill $$bsimpid $$bsim2pid; exit $$retcode
    endif
else
    ifeq ($(OS),android)
	$(XBSVDIR)/scripts/run.zedboard bin/mkTop.xdevcfg.bin.gz bin/android_exe $(RUN_ARGS)
    else
	$(XBSVDIR)/scripts/run.pcietest bin/mk*.bin.gz bin/ubuntu_exe $(RUN_ARGS)
    endif
endif

xsim: verilog
	xvlog $(XVLOGFLAGS) verilog/*.v
	xelab $(XELABFLAGS) work.$(MKTOP)

xsimrun: xsim
	xsim $(XSIMFLAGS) work.$(MKTOP)

$(vfile): $(TOPBSVFILE) $(BSVFILES)
	$(Q)mkdir -p verilog/portal $(DTOP)/obj
	@echo BSCVERILOG [$(DTOP)]
	$(Q)cd sources; $(RUN_BSC) -remove-dollar -verilog -u -g $(MKTOP) $(TOPBSVFILE)
	$(Q)sed -i 's|// On .*|// timestamp removed|' verilog/*.v
	$(Q)for v in verilog/*.v; do $(XBSVDIR)/scripts/copy_verilog.py $$v $(subst :, ,$(BSVPATH)); done

$(DTOP)/jni/%.cpp: $(XBSVDIR)/cpp/%.cpp
	$(Q)cp $< $@
$(DTOP)/jni/%.cxx: $(XBSVDIR)/cpp/%.cxx
	$(Q)cp $< $@
$(DTOP)/jni/%.c: $(XBSVDIR)/cpp/%.c
	$(Q)cp $< $@

bsim: prepare_bin_target $(DTOP)/jni/TlpReplay.cxx $(BSIM_CXX_LOCAL)
	$(Q)mkdir -p $(DTOP)/obj verilog
	@echo BSCBSIM [$(DTOP)]
	$(Q)cd sources; $(RUN_BSC) -D BSIM -sim -u -g $(MKTOP) $(TOPBSVFILE)
	$(Q)cd sources; $(RUN_BSC) $(BSC_CXXFLAGS) -sim -e $(MKTOP) -o bsim $(DTOP)/obj/*.ba $(BSIM_CXX_LOCAL) $(BSIM_CXX_PROJECT)
	$(Q)cp -v sources/bsim* bin
	$(QTUSED)

syntax.timestamp: $(BSVFILES)
	@#$syntax.py uses environment variables: V S2H H2S BSVDEFINES_LIST DTOP DUT_NAME
	$(Q)$(XBSVDIR)/scripts/syntax.py $(BSVFILES)
	$(Q)touch syntax.timestamp

verilog: $(vfile)

lint: $(vfile)
	verilator --error-limit 200 --lint-only -Isources/$(DUT) -Isources/source $(vfile)

prepare_bin_target: syntax.timestamp
	@mkdir -p bin
	@git rev-parse HEAD > bin/githash
	@git diff | gzip -c > bin/gitdiff.patch.gz

hwclean:
	rm -fr obj hw vivado*.jou vivado*.log fsm_encoding.os .Xil

clean: hwclean
	rm -fr verilog

