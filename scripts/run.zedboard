#!/usr/bin/env python

# Copyright (c) 2013 Quanta Research Cambridge, Inc.

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import os
import socket
import subprocess
import sys

scriptdir=os.path.dirname(sys.argv[0])
sys.path.append(scriptdir)

from adb import adb_commands
from adb import common

timelimit=600
if os.environ.has_key('RUNTIMELIMIT'):
    timelimit = int(os.environ['RUNTIMELIMIT'])
buildbot_build=None
if os.environ.has_key('BUILDBOT_BUILD_NUMBER'):
    buildbot_build = os.environ['BUILDBOT_BUILD_NUMBER']

if os.environ.has_key('RUNPARAM'):
    ipaddr = os.environ['RUNPARAM']
else:
    ipaddr = None

buildbot_url='http://connectalbuild.qrclab.com/archive/'
if os.environ.has_key('BUILDBOT_URL'):
    buildbot_url=os.environ['BUILDBOT_URL']

epilog = '''
Will download the bit file and executable from buildbot if
buildbot-url, project, and build-number are specified.

The buildbot-url defaults to %(buildbot_url)s.
''' % {
    'buildbot_url': buildbot_url
}

argparser = argparse.ArgumentParser("Run Connectal apps on Android Zynq boards.",
                                    epilog=epilog)
argparser.add_argument('bitfile', help='Gzipped binary bit file for the FPGA', nargs='?')
argparser.add_argument('androidexe', help='Android executable for the Zynq', nargs='?')
argparser.add_argument('file', help='Additional files to transfer to the target', nargs='*', default=[])
argparser.add_argument('-t', '--timelimit', type=int, default=timelimit, help='Time limit for jobs running on the zedboard. Defaults to value of environment variable RUNTIMELIMIT or 600 seconds.')
argparser.add_argument('-a', '--ipaddr', default=ipaddr, help='IP address of target board')
argparser.add_argument('-u', '--buildbot-url', default=buildbot_url, help='Base URL of buildbot.')
argparser.add_argument('-p', '--project', help='Name of project on buildbot.')
argparser.add_argument('-b', '--build-number', help='Build number on buildbot.')

def run_zedboard(bitfile, androidexe, additional_files):
    ipaddr = options.ipaddr
    if not ipaddr:
        p = subprocess.Popen('checkip')
        ipaddr = p.stdout.read()
        ipaddr = ipaddr.replace('\n', '')
        ipaddr = ipaddr.replace('\r', '')
    device_serial = '%s:5555' % (ipaddr)

    connected = False
    while not connected:
        try:
            connection = adb_commands.AdbCommands.ConnectDevice(serial=device_serial)
            connected = True
        except socket.error:
            #print('socket.error', sys.exc_info())
            pass
    print(connection.Shell('whoami'))
    try:
        print(connection.Root())
        time.sleep(4)
    except:
        print('exception while restarting adbd as root')

    connected = False
    while not connected:
        try:
            connection = adb_commands.AdbCommands.ConnectDevice(serial=device_serial)
            connected = True
        except socket.error:
            #print('socket.error', sys.exc_info())
            pass

    #connection.Remount()
    connection.Shell('mkdir -p /mnt/sdcard/tmp')
    connection.Shell('mount -t tmpfs tmpfs /mnt/sdcard/tmp')
    connection.Push(bitfile, '/mnt/sdcard/tmp/%s' % os.path.basename(bitfile))
    connection.Push(androidexe, '/mnt/sdcard/tmp/%s' % os.path.basename(androidexe))
    connection.Shell('chmod agu+rx /mnt/sdcard/tmp/%s' % os.path.basename(androidexe))
    for f in additional_files:
        connection.Push(f, '/mnt/sdcard/tmp/%s' % os.path.basename(f))
    print(connection.Shell("rmmod portalmem"))
    print(connection.Shell("rmmod zynqportal"))
    print(connection.Shell("insmod /mnt/sdcard/portalmem.ko"))
    print(connection.Shell("insmod /mnt/sdcard/zynqportal.ko"))
    print(connection.Shell("gzip -dc /mnt/sdcard/tmp/%s >/dev/xdevcfg" % os.path.basename(bitfile)))
    print(connection.Shell("touch /mnt/sdcard/tmp/perf.monkit"))
    print(connection.Shell("cd /mnt/sdcard/tmp/; rm -f /mnt/sdcard/tmp/exit.status; /mnt/sdcard/timelimit -t %d ./%s %s; echo $? > /mnt/sdcard/tmp/exit.status"
                           % (options.timelimit, os.path.basename(androidexe), ' '.join([os.path.basename(f) for f in additional_files]))))
    connection.Pull('/mnt/sdcard/tmp/exit.status', 'exit.status')
    connection.Pull('/mnt/sdcard/tmp/perf.monkit', 'perf.monkit')
    print(connection.Shell('rm -vf %s' % ' '.join([os.path.basename(f) for f in [bitfile, androidexe] + additional_files])))
    status = int(open('exit.status').read())
    print('status=%d' % status)
    sys.exit(status)

if __name__ == '__main__':
    options = argparser.parse_args()
    run_zedboard(options.bitfile, options.androidexe, options.file)
