# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#

CONNECTALDIR=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
include $(CONNECTALDIR)/Makefile.version

V?=0
ifeq ($(V),0)
Q=@
VERBOSE_SWITCH=
else
Q=
VERBOSE_SWITCH=--verbose
endif

bozotarget:
	@echo "Makefile.connectal: please invoke with make gen.boardname"
#
## use "make gen.board" to generate the build directory
gen.%:
	make BOARD=$* --no-print-directory gentarget prebuild
	make -C $* BOARD=$* --no-print-directory prepare_bin_target

exe.%:
	make BOARD=$* --no-print-directory gentarget prebuild exe

build.%: gen.%
	make -C $* BOARD=$* --no-print-directory all

run.%:
	make -C $* BOARD=$* --no-print-directory run

programflash.%:
	make -C $* BOARD=$* --no-print-directory programflash

%.gdb:
	make CONNECTAL_DEBUG=1 --no-print-directory $*

IPDIR?=$(CONNECTALDIR)/out
NUMBER_OF_TILES?=1
SLAVE_DATA_BUS_WIDTH?=32
SLAVE_CONTROL_ADDR_WIDTH?=5
NUMBER_OF_MASTERS?=1
PIN_TYPE?=Empty
ifndef MAIN_CLOCK_PERIOD
    ifeq ($(BOARD),vc707g2)
    PCIE_CLOCK_PERIOD?=4
    MAIN_CLOCK_PERIOD=4
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifeq ($(BOARD),kc705g2)
    PCIE_CLOCK_PERIOD?=4
    MAIN_CLOCK_PERIOD=4
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifeq ($(BOARD),vc707)
    PCIE_CLOCK_PERIOD?=8
    MAIN_CLOCK_PERIOD=8
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifeq ($(BOARD),kc705)
    PCIE_CLOCK_PERIOD?=8
    MAIN_CLOCK_PERIOD=8
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifeq ($(BOARD),netfpga-sume)
    PCIE_CLOCK_PERIOD?=8
    MAIN_CLOCK_PERIOD=8
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifeq ($(BOARD),zc706)
    PCIE_CLOCK_PERIOD?=8
    MAIN_CLOCK_PERIOD=5
    DEFAULT_DERIVED_CLOCK_PERIOD=2.5
    endif
    ifeq ($(BOARD),de5)
    PCIE_CLOCK_PERIOD?=8
    MAIN_CLOCK_PERIOD=8
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifeq ($(BOARD),htg4)
    PCIE_CLOCK_PERIOD?=8
    MAIN_CLOCK_PERIOD=8
    DEFAULT_DERIVED_CLOCK_PERIOD=4
    endif
    ifndef MAIN_CLOCK_PERIOD
    MAIN_CLOCK_PERIOD=10
    DEFAULT_DERIVED_CLOCK_PERIOD=5
    endif
endif
ifneq ($(PCIE_CLOCK_PERIOD),)
PCIE_CLOCK_DEFINE ?= -D PcieClockPeriod=$(PCIE_CLOCK_PERIOD)
endif
ifndef DERIVED_CLOCK_PERIOD
DERIVED_CLOCK_PERIOD?=$(DEFAULT_DERIVED_CLOCK_PERIOD)
endif
ifndef BURST_LEN_SIZE
BURST_LEN_SIZE=8
endif

CONNECTALFLAGS += -D ConnectalVersion=$(VERSION)
CONNECTALFLAGS += -D NumberOfMasters=$(NUMBER_OF_MASTERS) -D PinType=$(PIN_TYPE) -D MainClockPeriod=$(MAIN_CLOCK_PERIOD) $(PCIE_CLOCK_DEFINE) -D DerivedClockPeriod=$(DERIVED_CLOCK_PERIOD)
CONNECTALFLAGS += -D NumberOfTiles=$(NUMBER_OF_TILES)
CONNECTALFLAGS += -D SlaveDataBusWidth=$(SLAVE_DATA_BUS_WIDTH)
CONNECTALFLAGS += -D SlaveControlAddrWidth=$(SLAVE_CONTROL_ADDR_WIDTH)
CONNECTALFLAGS += -D BurstLenSize=$(BURST_LEN_SIZE)
CONNECTALFLAGS += --ipdir=$(IPDIR)
CONNECTALFLAGS += -D ExportType=$(EXPORT_TYPE)
ifeq ($(BOARD),xsim)
CONNECTALFLAGS += -D BluenocTop
BLUENOC?=--bluenoc
endif
ifneq ($(AUTOTOP),)
USE_AUTOTOP = 1
endif
ifneq ($(S2H_INTERFACES),)
USE_AUTOTOP = 1
endif
ifneq ($(H2S_INTERFACES),)
USE_AUTOTOP = 1
endif
ifneq ($(MEM_INTERFACES),)
USE_AUTOTOP = 1
endif

ifneq ($(NUMBER_OF_MASTERS), 0)
INTERFACES += MemServerRequest MMURequest MemServerIndication MMUIndication
BSVFILES += $(CONNECTALDIR)/bsv/ConnectalMemory.bsv
CPPFILES += $(CONNECTALDIR)/cpp/dmaManager.c
ifneq ($(CPPFILES2),)
CPPFILES2 += $(CONNECTALDIR)/cpp/dmaManager.c
endif
ifneq ($(USE_AUTOTOP),)
S2H_INTERFACES += MMURequest:MMU.request MemServerRequest:MemServer.request
H2S_INTERFACES += MMU\#\(PhysAddrWidth\):MMUIndication:0,True
endif
endif

ifeq ($(BOARD),xsim)
INTERFACES += XsimMemSlaveRequest XsimMemSlaveIndication
CPPFILES += $(CONNECTALDIR)/cpp/xsimfunc.cpp
BSVFILES += $(CONNECTALDIR)/bsv/XsimIF.bsv
endif

all bits verilog implementation bsim xsim xsimrun: gentarget prebuild
	make -C $(BOARD) --no-print-directory $@

android.exe bsim_exe ubuntu.exe exe: gentarget
	make -C $(BOARD) --no-print-directory $@

PCIEGEN=$(shell grep PCIE $(CONNECTALDIR)/boardinfo/$(BOARD).json | sed 's/.*PCIE\([123]\).*/\1/')
NEED_XILINX_PCIE_ac701=1
NEED_XILINX_PCIE_kc705g2=$(PCIEGEN)
NEED_XILINX_PCIE_vc707g2=$(PCIEGEN)
NEED_XILINX_PCIE_kc705=$(PCIEGEN)
NEED_XILINX_PCIE_vc707=$(PCIEGEN)
NEED_XILINX_PCIE_netfpgasume=3
NEED_XILINX_PCIE_v2000t=1

NEED_ALTERA_PCIE_de5=1
NEED_ALTERA_PCIE_htg4=1

NEED_ALTERA_ETH_de5=1
NEED_ALTERA_ETH_htg4=1

ifeq ($(NEED_XILINX_PCIE_$(BOARD)),1)
    FPGAMAKE_CONNECTALFLAGS += -P mkPcieEndpointX7 -P mkPcieHost
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie_7x_0/pcie_7x_0.xci
    CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif
ifeq ($(NEED_XILINX_PCIE_$(BOARD)),2)
    FPGAMAKE_CONNECTALFLAGS += -P mkPcieEndpointX7Gen2 -P mkPcieHost
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie2_7x_0/pcie2_7x_0.xci
    CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif

ifeq ($(NEED_XILINX_PCIE_$(BOARD)),3)
    FPGAMAKE_CONNECTALFLAGS += -P mkPcieEndpointX7 -P mkPcieHost
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie3_7x_0/pcie3_7x_0.xci
    CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif

ifeq ($(NEED_ALTERA_PCIE_$(BOARD)),1)
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/synthesis/altera_pcie_reconfig_driver_wrapper/altera_pcie_reconfig_driver_wrapper.qip
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/synthesis/altera_pcie_sv_hip_ast_wrapper/altera_pcie_sv_hip_ast_wrapper.qip
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/synthesis/alt_xcvr_reconfig_wrapper/alt_xcvr_reconfig_wrapper.qip
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/siv_gen2x8/siv_gen2x8.qip
	FPGAMAKE_CONNECTALFLAGS += --tcl=$(BOARD)/generatedbsv/$(BOARD).qsf
	FPGAMAKE_CONNECTALFLAGS += --tcl=$(CONNECTALDIR)/constraints/altera/$(BOARD).sdc
	CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS -demote-errors G0066:G0045 -suppress-warnings G0046:G0020:S0015:S0080:S0039"
endif

CONNECTALFLAGS += $(FPGAMAKE_CONNECTALFLAGS)
ifeq ($(USE_BUILDCACHE),1)
BUILDCACHE?=$(CONNECTALDIR)/../buildcache/buildcache
BUILDCACHE_CACHEDIR?=$(CONNECTALDIR)/../fpgamake-cache/$(shell basename `/bin/pwd`)/$(BOARD)
CONNECTALFLAGS += --cache=$(BUILDCACHE_CACHEDIR)
endif

CONNECTALFLAGS += $(EXTRA_CONNECTALFLAGS)

ifeq ($(USE_PRINTF),1)
PRINTF_EXTRA=$(BOARD)/generatedbsv/DisplayInd.bsv
else
PRINTF_EXTRA=$(CONNECTALDIR)/bsv/DisplayInd.bsv
endif

ifneq ($(USE_AUTOTOP),)
GPROJ = $(BOARD)/generatedbsv
GENTOP = $(GPROJ)/Top.bsv
endif

comma := ,
gentarget:: process_autotop generate_altera_custom
	@[ -e $(CONNECTALDIR)/scripts/syntax/parsetab.py ] || make -C $(CONNECTALDIR) scripts/syntax/parsetab.py
	$(Q)[ -e $(IPDIR) ] || mkdir -p $(IPDIR)
	$(Q)[ -e $(BOARD)/generatedbsv ] || mkdir -p $(BOARD)/generatedbsv
	$(Q)[ -e $(BOARD)/jni ] || mkdir -p $(BOARD)/jni
ifeq ($(USE_PRINTF),1)
	$(CONNECTALDIR)/scripts/preprocess_trace.py $(BOARD) $(BSVFILES)
endif
	$(Q)$(CONNECTALDIR)/scripts/makefilegen.py -B$(BOARD) -p $(BOARD) \
	$(foreach interfaces, $(INTERFACES), -interfaces $(interfaces)) \
	$(foreach f, $(CPPFILES), --source $f) \
	$(foreach f, $(CPPFILES2), --source2 $f) \
	$(foreach f, $(PINOUT_FILE), --pinout $f) \
	$(foreach f, $(PIN_BINDINGS), --pin-binding $f) \
	$(foreach f, $(S2H_INTERFACES), -interfaces $(word 1, $(subst /,, $(subst :, , $f)))) \
	$(foreach f, $(H2S_INTERFACES), $(foreach g, $(subst $(comma), , $(word 2, $(subst :, , $f))), -interfaces $g)) \
	$(foreach f, $(PORTAL_DUMP_MAP), --dump_map $f) \
        $(CONNECTALFLAGS) $(BSVFILES) $(GENTOP) $(PRINTF_EXTRA) $(VERBOSE_SWITCH)

process_autotop::
	$(Q)[ -e $(BOARD) ] || mkdir -p $(BOARD)
	touch $(BOARD)/Makefile.autotop
ifneq ($(USE_AUTOTOP),)
	$(Q)[ -e $(GPROJ) ] || mkdir -p $(GPROJ)
	$(Q)$(CONNECTALDIR)/scripts/topgen.py --project-dir $(GPROJ) $(AUTOTOP) $(BLUENOC) \
	    $(foreach f, $(S2H_INTERFACES), --wrapper $f) \
	    $(foreach f, $(H2S_INTERFACES), --proxy $f)   \
	    $(foreach f, $(MEM_INTERFACES), --proxy MemServer\#\(PhysAddrWidth,DataBusWidth,\`NumberOfMasters\):MemServerIndication:$f,cons\(lMMU,nil\))
endif

generate_altera_custom::
ifneq ($(PIN_BINDINGS), )
ifneq ($(filter $(BOARD), de5 htg4), )
	$(Q)[ -e $(BOARD)/generatedbsv ] || mkdir -p $(BOARD)/generatedbsv
	$(CONNECTALDIR)/scripts/generate-constraints.py -f altera \
		$(foreach f, $(PIN_BINDINGS), -b $f) \
		-o $(BOARD)/generatedbsv/$(BOARD).qsf \
		--boardfile $(CONNECTALDIR)/boardinfo/$(BOARD).json --pinoutfile boards/$(BOARD).json
endif
endif

prebuild::
	@# additional steps needed before making verilog etc
ifneq ($(NEED_XILINX_PCIE_$(BOARD)),)
	@echo "building ... $(BOARD) PCIe gen$(PCIEGEN)"
	cd $(BOARD); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) vivado -notrace -mode batch -source $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-pcie.tcl
endif

# Synthesis Altera PCIe Core and PLL
ifeq ($(NEED_ALTERA_PCIE_$(BOARD)),1)
	cd $(BOARD); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) quartus_sh -t $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-pcie.tcl
endif

# Synthesize Altera Ethernet Core
ifeq ($(NEED_ALTERA_ETH_$(BOARD)), 1)
	cd $(BOARD); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) quartus_sh -t $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-eth.tcl
endif

