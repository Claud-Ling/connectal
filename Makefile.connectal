# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#

XBSVDIR=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

V=0
ifeq ($(V),0)
Q=@
VERBOSE_SWITCH=
else
Q=
VERBOSE_SWITCH=--verbose
endif

bozotarget:
	@echo "Makefile.connectal: please invoke with make gen.boardname"

## use "make gen.board" to generate the build directory
gen.%:
	make BOARD=$* --no-print-directory gentarget prebuild

build.%: gen.%
	make -C $* BOARD=$* --no-print-directory all

run.%:
	make -C $* BOARD=$* --no-print-directory run

%.gdb:
	make XBSV_DEBUG=1 --no-print-directory $*

#ifeq ($(origin IPDIR),undefined)
IPDIR=$(XBSVDIR)/out
#endif
ifndef NUMBER_OF_MASTERS
NUMBER_OF_MASTERS=1
endif

XBSVFLAGS += -D NumberOfMasters=$(NUMBER_OF_MASTERS) --ipdir=$(IPDIR)

ifneq ($(NUMBER_OF_MASTERS), 0)
S2H += DmaDebugRequest MMUConfigRequest
H2S += DmaDebugIndication MMUConfigIndication
BSVFILES += $(XBSVDIR)/bsv/PortalMemory.bsv
CPPFILES += $(XBSVDIR)/cpp/dmaManager.c
ifneq ($(CPPFILES2),)
CPPFILES2 += $(XBSVDIR)/cpp/dmaManager.c
endif
endif

all bits verilog implementation bsim xsim xsimrun: gentarget prebuild
	make -C $(BOARD) --no-print-directory $@

android.exe bsim_exe ubuntu.exe exe: gentarget
	make -C $(BOARD) --no-print-directory $@

NEEDSPCIE_ac701=1
NEEDSPCIE_kc705=1
NEEDSPCIE_vc707=1
NEEDSPCIE_v2000t=1

ifeq ($(NEEDSPCIE_$(BOARD)),1)
    FPGAMAKE_XBSVFLAGS += -P mkPcieEndpointX7 -P mkPcieHost
    XBSVFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie_7x_0/pcie_7x_0.xci
    XBSVFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif

XBSVFLAGS += $(FPGAMAKE_XBSVFLAGS)
ifeq ($(USE_BUILDCACHE),1)
XBSVFLAGS += --cache=$(XBSVDIR)/../fpgamake-cache/$(shell basename `/bin/pwd`)/$(BOARD)
endif

XBSVFLAGS += $(EXTRA_XBSVFLAGS)

ifeq ($(USE_PRINTF),1)
PRINTF_EXTRA=$(BOARD)/sources/DisplayInd.bsv
else
PRINTF_EXTRA=$(XBSVDIR)/bsv/DisplayInd.bsv
endif

gentarget::
	@[ -e $(XBSVDIR)/scripts/syntax/parsetab.py ] || make -C $(XBSVDIR) scripts/syntax/parsetab.py
	$(Q)[ -e $(IPDIR) ] || mkdir -p $(IPDIR)
	$(Q)[ -e $(BOARD)/sources ] || mkdir -p $(BOARD)/sources
	$(Q)[ -e $(BOARD)/jni ] || mkdir -p $(BOARD)/jni
ifeq ($(USE_PRINTF),1)
	$(XBSVDIR)/scripts/preprocess_trace.py $(BOARD) $(BSVFILES)
endif
	$(Q)$(XBSVDIR)/scripts/makefilegen.py -B$(BOARD) -p $(BOARD) \
	$(foreach s2h, $(S2H), -s2h $(s2h)) \
	$(foreach h2s, $(H2S), -h2s $(h2s)) \
	$(foreach f, $(CPPFILES), --source $f) \
	$(foreach f, $(CPPFILES2), --source2 $f) \
        $(XBSVFLAGS) $(BSVFILES) $(PRINTF_EXTRA) $(VERBOSE_SWITCH)

prebuild::
	@# additional steps needed before making verilog etc
ifeq ($(NEEDSPCIE_$(BOARD)),1)
	cd $(BOARD); vivado -notrace -mode batch -source $(shell cd $(XBSVDIR); /bin/pwd)/scripts/connectal-synth-pcie.tcl
endif
