#!/usr/bin/python
import os, sys, shutil, string
import AST
import bsvgen
import xpsgen
import cppgen
import syntax
import argparse
import util

AST.Function.__bases__ += (cppgen.NoCMixin,)
AST.Module.__bases__ += (cppgen.NoCMixin,)
AST.Method.__bases__ += (cppgen.MethodMixin,bsvgen.MethodMixin)
AST.StructMember.__bases__ += (cppgen.StructMemberMixin,)
AST.Struct.__bases__ += (cppgen.StructMixin,bsvgen.NullMixin)
AST.EnumElement.__bases__ += (cppgen.EnumElementMixin,)
AST.Enum.__bases__ += (cppgen.EnumMixin,bsvgen.NullMixin)
AST.Type.__bases__ += (cppgen.TypeMixin,bsvgen.TypeMixin)
AST.Param.__bases__ += (cppgen.ParamMixin,)
AST.Interface.__bases__ += (cppgen.InterfaceMixin,bsvgen.InterfaceMixin,xpsgen.InterfaceMixin)

supported_boards = ['zedboard', 'zc702']

argparser = argparse.ArgumentParser("Generate C++/BSV/Xilinx stubs for an interface.")

argparser.add_argument('bsvfile', help='BSV files to parse', nargs='+')
argparser.add_argument('-B', '--board', default='zc702', choices=supported_boards,
                       help='Board to generate stubs and ucf constraints for')
argparser.add_argument('-b', '--interface', help='BSV interface to generate stubs for')
argparser.add_argument('-p', '--project-dir', default='./xpsproj', help='xps project directory')
argparser.add_argument('-e', '--edk-version', default=xpsgen.edkversion, help='Xilinx EDK version', choices=xpsgen.edkversions)

tclfileXprTemplate='''
create_project %(dut)s . -part xc7z020clg484-1
add_files sources
add_files -fileset constrs_1 -norecurse {constraints/design_1_processing_system7_1_0.xdc}
add_files -fileset constrs_1 -norecurse {constraints/%(dut)s.xdc}
update_compile_order -fileset sources_1
update_compile_order -fileset sources_1
update_compile_order -fileset sim_1
close_project
'''

tclfileTemplate='''
open_project %(dut)s
reset_run synth_1
reset_run impl_1
launch_runs synth_1
wait_on_run synth_1
launch_runs impl_1
wait_on_run impl_1
## causes it to create both .bit and .bin files
set_property STEPS.WRITE_BITSTREAM.ARGS.BIN_FILE true [get_runs impl_1]
launch_runs impl_1 -to_step write_bitstream
wait_on_run impl_1
close_project
'''

makefileTemplate='''
XBSVTOP=$(PWD)/..
BSVPATH = $(XBSVTOP)/%(bsvpath)s:$(XBSVTOP)/bsv
vfile=sources/%(dut)s/mk%(Dut)sWrapper.v

$(vfile): sources/%(dut)s/%(Dut)sWrapper.bsv
	cd sources/%(dut)s; bsc -show-schedule -p +:$(BSVPATH) -verilog -u -g mk%(Dut)sWrapper %(Dut)sWrapper.bsv

verilog: $(vfile)
	./updatepao $(vfile) $(paofile) $(subst :, ,$(BSVPATH))
	cp -r ../xilinx/sources/* sources/
	cp -r ../xilinx/constraints .

%(dut)s.xpr:
	vivado -mode batch -source %(dut)sxpr.tcl

%(dut)s.runs/impl_1/%(dut)s_top_1.bit: $(vfile) %(dut)s.xpr
	vivado -mode batch -source %(dut)s.tcl

bits: %(dut)s.runs/impl_1/%(dut)s_top_1.bit

%(dut)s.bit.bin.gz: %(dut)s.runs/impl_1/%(dut)s_top_1.bit
	#promgen -w -b -p bin -o %(dut)s.bit.bin -u 0 %(dut)s.runs/impl_1/%(dut)s_top_1.bit -data_width 32
	xxd %(dut)s.runs/impl_1/%(dut)s_top_1.bin | sed -e "s/  .*//" -e "s/ \(..\)\(..\) \(..\)\(..\)/ \\4\\3 \\2\\1/g" | xxd -r >%(dut)s.bit.bin
	gzip -f %(dut)s.bit.bin

boot.bin: %(dut)s.bit.bin.gz
'''

if __name__=='__main__':
    namespace = argparser.parse_args()
    print namespace

    project_dir = os.path.expanduser(namespace.project_dir)

    for inputfile in namespace.bsvfile:
        s = open(inputfile).read() + '\n'
        s1 = syntax.parse(s)

    dutname = namespace.interface.lower()
    corename = '%s_v1_00_a' % namespace.interface.lower()
    boardname = namespace.board.lower()

    tclname = os.path.join(project_dir, '%s.tcl' % namespace.interface.lower())
    tclxprname = os.path.join(project_dir, '%sxpr.tcl' % namespace.interface.lower())
    makename = os.path.join(project_dir, 'Makefile')

    applicationmkname = os.path.join(project_dir, 'jni', 'Application.mk')
    androidmkname = os.path.join(project_dir, 'jni', 'Android.mk')
    hname = os.path.join(project_dir, 'jni', '%s.h' % namespace.interface)
    cppname = os.path.join(project_dir, 'jni', '%s.cpp' % namespace.interface)
    bsvname = os.path.join(project_dir, 'sources', dutname,
                           '%sWrapper.bsv' % namespace.interface)
    topverilogname = os.path.join(project_dir, 'sources', 'top.v')
    verilogname = os.path.join(project_dir, 'sources', dutname,
                               '%s.v' % namespace.interface)
    ucfname = os.path.join(project_dir, 'data',
                           '%s.ucf' % dutname)
    xdcname = os.path.join(project_dir, 'constraints',
                           '%s.xdc' % dutname)
    print 'Writing CPP header', hname
    h = util.createDirAndOpen(hname, 'w')
    h.write('#include "portal.h"\n')
    print 'Writing CPP wrapper', cppname
    cpp = util.createDirAndOpen(cppname, 'w')
    cpp.write('#include "%s.h"\n' % namespace.interface)
    print 'Writing BSV wrapper', bsvname
    bsv = util.createDirAndOpen(bsvname, 'w')
    bsvgen.emitPreamble(bsv, namespace.bsvfile)

    ## code generation pass
    for v in syntax.globaldecls:
        if v.type == 'Struct':
            v.emitCDeclaration(h)
        #v.emitCImplementation(cpp)

    if (syntax.globalvars.has_key(namespace.interface)):
        subinterface = syntax.globalvars[namespace.interface]

        for d in subinterface.decls:
            if d.type == 'Interface':
                if syntax.globalvars.has_key(d.name):
                    subintdef = syntax.globalvars[d.name]
                    print d.params
                    newint = subintdef.instantiate({'a': d.params[0]})
                    print newint
                    for sd in newint.decls:
                        sd.name = '%s.%s' % (d.name, sd.name)
                        subinterface.decls.append(sd)

        indicationInterfaceName = '%sIndications' % util.capitalize(namespace.interface)
        indicationInterface = syntax.globalvars[indicationInterfaceName]
        subinterface.isIndication = False
        indicationInterface.isIndication = True
        subinterface.assignRequestResponseChannels()
        indicationInterface.assignRequestResponseChannels(subinterface.channelCount)

        indicationInterface.emitCDeclaration(h)
        subinterface.emitCDeclaration(h)
        indicationInterface.emitCImplementation(cpp)
        subinterface.emitCImplementation(cpp)

        subinterface.emitBsvImplementation(bsv)
        subinterface.writeVerilog(verilogname)
        subinterface.writeTopVerilog(topverilogname)
        subinterface.writeUcf(ucfname, boardname)
        subinterface.writeXdc(xdcname, boardname)
        print 'Writing Android.mk', androidmkname
        print 'Writing Application.mk', applicationmkname
        subinterface.writeAndroidMk(androidmkname, applicationmkname)

    if cppname:
        srcdir = os.path.join(os.path.dirname(sys.argv[0]), 'cpp')
        dstdir = os.path.dirname(cppname)
        for f in ['portal.h', 'portal.cpp']:
            shutil.copyfile(os.path.join(srcdir, f), os.path.join(dstdir, f))
    shutil.copyfile(os.path.join(os.path.dirname(sys.argv[0]), 'updatepao'),
                    os.path.join(project_dir, 'updatepao'))
    shutil.copymode(os.path.join(os.path.dirname(sys.argv[0]), 'updatepao'),
                    os.path.join(project_dir, 'updatepao'))

    print 'Writing tcl file', tclname
    tcl = util.createDirAndOpen(tclname, 'w')
    tcl.write(tclfileTemplate % {'dut': namespace.interface.lower(),
                                 'Dut': util.capitalize(namespace.interface),
                                 'project_dir': project_dir
                                 })
    tcl.close()
    tcl = util.createDirAndOpen(tclxprname, 'w')
    tcl.write(tclfileXprTemplate % {'dut': namespace.interface.lower(),
                                    'Dut': util.capitalize(namespace.interface),
                                    'project_dir': project_dir
                                    })
    tcl.close()

    print 'Writing Makefile', makename
    make = util.createDirAndOpen(makename, 'w')
    make.write(makefileTemplate % {'corename': corename,
                                   'dut': namespace.interface.lower(),
                                   'Dut': util.capitalize(namespace.interface),
                                   'bsvpath': os.path.dirname(namespace.bsvfile[0])
                                   })
    make.close()

    print '############################################################'
    print '## To build:'
    print '    cd %s; make verilog; make bits' % (project_dir)
    print '## You can use XPS to generate bit file or exit and let make complete the process.'
