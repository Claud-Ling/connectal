== Portal Interface Structure

XBSV connects software and hardware via portals, where each portal is
an interface that allows one side to invoke methods on the other side.

We generally call a portal from software to hardware to be a "request"
and from hardware to software to be an "indication" interface.

["seqdiag",target="request-response-21.png"]
---------------------------------------------------------------------
{
  SW; HW
  SW -> HW [label = "request"];
  SW <- HW [label = "indication"];
}
---------------------------------------------------------------------

A portal is conceptually a FIFO, where the arguments to a method are
packaged as a message. XBSV generates a "proxy" that marshalls the
arguments to the method into a message and a "wrapper" that unpacks
the arguments and invokes the method.

Currently, xbsvgen includes a library that implements portals via
memory mapped hardware.

=== Portal Device Drivers

XBSV uses a platform-specific driver to enable user-space applications
to memory-map each portal used by the application and to enable the
application to wait for interrupts from the hardware.

indexterm:pcieportal
indexterm:zynqportal

* pcieportal.ko
* zynqportal.ko

XBSV also uses a generic driver to enable the applications to allocate DRAM that will be shared with the hardware and to send the memory mapping of that memory to the hardware.

* portalmem.ko

=== Portal Memory Map

XBSV currently supports up to 15 portals connected between software and hardware, for a total of 1MB of address space. It also provides a directory.

[options="header"]
|============================================================
| Base address | Function
|      0x00000 | Directory that maps portal identifier to portal number
|      0x10000 | Portal 0
|      0x20000 | Portal 1
|      0x30000 | Portal 2
|      0x40000 | Portal 3
|      0x50000 | Portal 4
|      0x60000 | Portal 5
|      0x70000 | Portal 6
|      0x80000 | Portal 7
|      0x90000 | Portal 8
|      0xa0000 | Portal 9
|      0xb0000 | Portal 10
|      0xc0000 | Portal 11
|      0xd0000 | Portal 12
|      0xe0000 | Portal 13
|      0xf0000 | Portal 14
|============================================================

Each portal uses 64KB of address space, divided equally into 4 sections:

[options="header"]
|============================================================
| Base address | Function
|      0x0000 | Request FIFO base
|      0x4000 | Request register base
|      0x8000 | Indication FIFO base 
|      0xc000 | Indication register base
|============================================================

Although each portal only passes messages in one direction, it
supports two way communication. For "request" portals, the indication
path is used to communicate that a message send failed.

=== Portal FIFOs

Each method is implemented as a FIFO to or from hardware. Each FIFO is allocated 256 bytes of address space.

[options="header"]
|============================================================
| base address | Function
| 0x0000       | Request method 0 FIFO
| 0x0100       | Request method 1 FIFO
| ...          | ...
| 0x8000       | Indication method 0 FIFO
| 0x0100       | Indication method 1 FIFO
| ...          | ...
|============================================================

=== Portal Request Registers

[options="header"]
|============================================================
| Base address | Function
|      0x4000 | Request fired count
|      0x4004 | Out of range write count
|============================================================

=== Portal Indication Registers

[options="header"]
|============================================================
| Base address | Function                    | Description
|      0xc000 | Interrupt status register    | 1 if this portal has any messages ready, 0 otherwise
|      0xC004 | Interrupt enable register    | Write 1 to enable interrupts, 0 to disable
|      0xC008 | Method count?                | Number of methods implemented by this portal
|      0xC00C | Underflow read count reg     | 
|      0xC010 | Out of range read count reg  | 
|      0xC014 | Out of range write count reg | 
|      0xC018 | Ready channel indication     | channel number + 1 if message is available, 0 otherwise
|============================================================

